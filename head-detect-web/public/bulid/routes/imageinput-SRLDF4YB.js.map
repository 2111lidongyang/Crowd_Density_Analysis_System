{
  "version": 3,
  "sources": ["../../../app/routes/imageinput.tsx"],
  "sourcesContent": ["// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app/routes/imageinput.tsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nvar _s = $RefreshSig$();\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app/routes/imageinput.tsx\");\n  import.meta.hot.lastModified = \"1704550403131.0122\";\n}\n// REMIX HMR END\n\nimport React, { useState, useRef } from \"react\";\nimport { Form } from \"@remix-run/react\";\nimport { Container, Header, Grid, Segment, Button, Image, Icon } from \"semantic-ui-react\";\nexport const action = async ({\n  request\n}) => {\n  const formData = await request.formData();\n};\nexport default function ImageInput() {\n  _s();\n  const [selectedImage, setSelectedImage] = useState(null);\n  const [resultImage, setResultImage] = useState(null);\n  const [heatMap, setHeatMap] = useState(null);\n  const fileInputRef = useRef(null);\n  const handleImageChange = async event => {\n    const file = event.target.files?.[0];\n    if (file) {\n      setSelectedImage(file);\n      const formData = new FormData();\n      formData.append(\"image\", file);\n      try {\n        const response = await fetch(\"http://127.0.0.1:5000/image_feed\", {\n          'method': 'POST',\n          'body': formData\n        });\n        const heatmap = await fetch(\"http://127.0.0.1:5000/image_feed?q=hm\", {\n          'method': 'POST',\n          'body': formData\n        });\n        if (!response.ok) {\n          throw new Error(\"HTTP Error:\" + response.statusText);\n        }\n        const blob = await response.blob();\n        const result = new File([blob], \"resultImage\");\n        setResultImage(result);\n        const hmap = await heatmap.blob();\n        const htmap = new File([hmap], \"heatmap\");\n        setHeatMap(htmap);\n        console.log(response);\n      } catch (error) {\n        console.error(error);\n      }\n    }\n  };\n  const handleImageCancel = event => {\n    setSelectedImage(null);\n    //\u8FD8\u8981\u6E05\u9664input\u4E2D\u7684file\n    document.getElementById(\"imagefile\")?.setAttribute(\"value\", \"\");\n    if (fileInputRef.current) {\n      fileInputRef.current.value = \"\";\n    }\n  };\n  const handleIconClick = () => {\n    // Make sure the current element exists and is of type 'input'\n    if (fileInputRef.current && fileInputRef.current instanceof HTMLInputElement) {\n      fileInputRef.current.click();\n    }\n  };\n  return <Container>\n            <Header as=\"h2\">\u56FE\u7247\u8F93\u5165</Header>\n            <Form action=\"/imageinput\" method=\"post\">\n                <Grid>\n                    <Grid.Row>\n                        <Grid.Column width={6}>\n                            <Segment>\n                                {selectedImage ? <div style={{\n                position: 'relative'\n              }}>\n                                    <Image src={URL.createObjectURL(selectedImage)} alt=\"\" />\n                                    <Icon name=\"cancel\" size=\"huge\" // \u589E\u52A0\u56FE\u6807\u7684\u5927\u5C0F\n                style={{\n                  position: 'absolute',\n                  top: '10px',\n                  // \u6839\u636E\u9700\u8981\u8C03\u6574\u4F4D\u7F6E\n                  right: '10px',\n                  // \u6839\u636E\u9700\u8981\u8C03\u6574\u4F4D\u7F6E\n                  cursor: 'pointer',\n                  color: 'red' // \u767D\u8272\u56FE\u6807\n                }} onClick={handleImageCancel} />\n                                </div> : <Button icon labelPosition=\"left\" onClick={handleIconClick}>\n                                    <Icon name=\"upload\" />\n                                    \u9009\u62E9\u56FE\u7247\n                                  </Button>}\n                            </Segment>\n                        </Grid.Column>\n                        <Grid.Column width={4}>\n                            <Button icon type=\"submit\">\n                            <Icon name=\"arrow right\" size=\"big\" />\n                            </Button>\n                        </Grid.Column>\n                        <Grid.Column width={6}>\n                        <Segment>\n                                {resultImage ? <div style={{\n                position: 'relative'\n              }}>\n                                    <Image src={URL.createObjectURL(resultImage)} alt=\"\" />\n                                </div> : <div>\n                                        <p>\u8F93\u51FA\u56FE\u7247</p>\n                                    </div>}\n                        </Segment>\n                        <Segment>\n                            {heatMap ? <div>\n                                    <Image src={URL.createObjectURL(heatMap)} alt=\"\" style={{\n                  width: '400px',\n                  height: '300px'\n                }} />\n                                </div> : <div>\n                                    <p>\u70ED\u529B\u56FE</p>\n                                </div>}\n                        </Segment>\n                        </Grid.Column>\n                    </Grid.Row>\n                </Grid>\n                <input ref={fileInputRef} name=\"image\" type=\"file\" accept=\"image/*\" required onChange={handleImageChange} style={{\n        display: 'none'\n      }} // \u9690\u85CF\u539F\u751F\u8F93\u5165\n      />\n            </Form>\n        </Container>;\n}\n_s(ImageInput, \"N1+VRHDC1Q3Khob+jgWVx1OQVtc=\");\n_c = ImageInput;\nvar _c;\n$RefreshReg$(_c, \"ImageInput\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;"],
  "mappings": "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",
  "names": []
}
